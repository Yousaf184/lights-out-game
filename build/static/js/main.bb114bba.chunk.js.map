{"version":3,"sources":["components/cell/cell.js","components/instructions/instructions.js","components/board/board.js","components/app/App.js","index.js"],"names":["Cell","props","classes","lightOn","className","onClick","cellClicked","coordinates","GameInstructions","ReactDOM","createPortal","dismissInstructions","document","getElementById","Board","initBoard","board","i","numRows","row","j","numCols","Math","random","litChance","push","drawBoardRows","tableRows","rowCells","state","key","handleCellClick","drawBoard","cellCoordinates","split","map","e","parseInt","cellX","cellY","boardCopy","lifeLineActive","setState","checkForVictory","restartGame","hasWon","lifeLineUsed","every","num","toggleInstructions","instructionsShown","useLifeLine","this","disabled","Component","defaultProps","App","render"],"mappings":"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","file":"static/js/main.bb114bba.chunk.js","sourcesContent":["import React from 'react';\r\nimport './cell.css';\r\n\r\nfunction Cell(props) {\r\n    const classes = 'cell' + (props.lightOn ? ' light-on' : '');\r\n\r\n    return (\r\n        <div\r\n            className={classes}\r\n            onClick={() => props.cellClicked(props.coordinates)}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './instructions.css';\r\n\r\nfunction GameInstructions(props) {\r\n    return (\r\n        ReactDOM.createPortal(\r\n            <div className=\"instructions-container\">\r\n                <div className=\"modal\">\r\n                    <h1>Game instructions</h1>\r\n                    <ul>\r\n                        <li>\r\n                            When the game starts, some of the board cells will be\r\n                            ON (blue colored) and some of them will be OFF (white colored)\r\n                        </li>\r\n                        <li>\r\n                            You need to turn off all the cells in order to win\r\n                        </li>\r\n                        <li>\r\n                            Clicking on a cell will toggle its light and the light of its\r\n                            neighbouring cells\r\n                        </li>\r\n                        <li>\r\n                            You also have life line available. When used,\r\n                            neighbouring cells of the clicked cell won't be toggled\r\n                            You can only use it once, use it wisely\r\n                        </li>\r\n                    </ul>\r\n                    <button onClick={props.dismissInstructions}>Dismiss</button>\r\n                </div>\r\n            </div>,\r\n            document.getElementById('modal')\r\n        )\r\n    );\r\n}\r\n\r\nexport default GameInstructions;","import React, { Component } from 'react';\r\nimport Cell from '../cell/cell';\r\nimport GameInstructions from '../instructions/instructions';\r\nimport './board.css';\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            board: this.initBoard(),\r\n            hasWon: false,\r\n            instructionsShown: false,\r\n            lifeLineUsed: false,\r\n            lifeLineActive: false\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        numRows: 5,\r\n        numCols: 5,\r\n        litChance: 0.25   // 0 - 1, chance of each board cell getting lit\r\n    };\r\n\r\n    // return 2D-array representing board\r\n    // 0 --> cell light off\r\n    // 1 --> cell light on\r\n    initBoard = () => {\r\n        const board = [];\r\n\r\n        for (let i=0; i<this.props.numRows; i++) {\r\n            const row = [];\r\n\r\n            for (let j=0; j<this.props.numCols; j++) {\r\n                row[j] = Math.random() < this.props.litChance ? 1 : 0;\r\n            }\r\n\r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    /**\r\n     * returns array containing multiple <tr> elements\r\n     * each <tr> element has following structure\r\n     * <tr>\r\n     *   <td><Cell/></td>\r\n     *   <td><Cell/></td>\r\n     *   <td><Cell/></td>\r\n     * </tr>\r\n    */\r\n    drawBoardRows = () => {\r\n        const tableRows = [];\r\n        let lightOn = null;\r\n\r\n        for (let i=0; i<this.props.numRows; i++) {\r\n            const rowCells = [];\r\n\r\n            for (let j=0; j<this.props.numCols; j++) {\r\n                lightOn = this.state.board[i][j] === 1 ? true : false;\r\n                rowCells[j] = (\r\n                    <td key={i + '-' +j}>\r\n                        <Cell\r\n                            coordinates={i+'-'+j}\r\n                            lightOn={lightOn}\r\n                            cellClicked={this.handleCellClick}/>\r\n                    </td>\r\n                );\r\n            }\r\n\r\n            tableRows.push(<tr key={i}>{rowCells}</tr>);\r\n        }\r\n\r\n        return tableRows;\r\n    };\r\n\r\n    drawBoard = () => {\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    { this.drawBoardRows() }\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    handleCellClick = (cellCoordinates) => {\r\n        let [cellX, cellY] = cellCoordinates.split('-').map(e => parseInt(e));\r\n\r\n        const boardCopy = [...this.state.board];\r\n\r\n        // toggle cell light\r\n        boardCopy[cellX][cellY] = this.state.board[cellX][cellY] === 1 ? 0 : 1;\r\n\r\n        // toggle neightborijng cells only if life lijne is not active\r\n        if (!this.state.lifeLineActive) {\r\n            // upper cell\r\n            if (cellX - 1 >= 0) {\r\n                boardCopy[cellX - 1][cellY] = boardCopy[cellX - 1][cellY] === 1 ? 0 : 1;\r\n            }\r\n            // bottom cell\r\n            if (cellX + 1 < this.props.numRows) {\r\n                boardCopy[cellX + 1][cellY] = boardCopy[cellX + 1][cellY] === 1 ? 0 : 1;\r\n            }\r\n            // right cell\r\n            if (cellY + 1 < this.props.numCols) {\r\n                boardCopy[cellX][cellY + 1] = boardCopy[cellX][cellY + 1] === 1 ? 0 : 1;\r\n            }\r\n            // left cell\r\n            if (cellY - 1 >= 0) {\r\n                boardCopy[cellX][cellY - 1] = boardCopy[cellX][cellY - 1] === 1 ? 0 : 1;\r\n            }\r\n        }\r\n\r\n        // if life line is active, disable it after cell was clicked\r\n        if (this.state.lifeLineActive) {\r\n            this.setState({ lifeLineActive: false });\r\n        }\r\n\r\n        this.setState({ board: boardCopy });\r\n\r\n        this.checkForVictory();\r\n    };\r\n\r\n    restartGame = () => {\r\n        this.setState({\r\n            hasWon: false,\r\n            board: this.initBoard(),\r\n            lifeLineUsed: false,\r\n            lifeLineActive: false\r\n        });\r\n    };\r\n\r\n    checkForVictory = () => {\r\n        const hasWon = this.state.board.every(row => row.every(num => num === 0));\r\n\r\n        if (hasWon) {\r\n            this.setState({ hasWon: true });\r\n        }\r\n    };\r\n\r\n    toggleInstructions = () => {\r\n        this.setState({ instructionsShown: !this.state.instructionsShown });\r\n    };\r\n\r\n    useLifeLine = () => {\r\n        this.setState({ lifeLineUsed: true, lifeLineActive: true });\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.instructionsShown) {\r\n            return <GameInstructions dismissInstructions={this.toggleInstructions}/>\r\n        }\r\n\r\n        if (this.state.hasWon) {\r\n            return (\r\n                <div>\r\n                    <p className=\"neon-orange won-text\">You Won!</p>\r\n                    <button className=\"play-again-btn\" onClick={this.restartGame}>\r\n                        Play Again\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                <h1 className=\"neon-blue\">Lights Out</h1>\r\n                <div className=\"board-container\">\r\n                    { this.drawBoard() }\r\n                </div>\r\n                <div className=\"game-btns-container\">\r\n                    <button className=\"restart-btn\" onClick={this.restartGame}>\r\n                        Restart\r\n                    </button>\r\n                    <button className=\"lifeline-btn\"\r\n                        onClick={this.useLifeLine}\r\n                        disabled={this.state.lifeLineUsed}>\r\n                        Use Lifeline\r\n                    </button>\r\n                </div>\r\n                <button className=\"instructions-btn\" onClick={this.toggleInstructions}>\r\n                    Instructions\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from '../board/board';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Board/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}